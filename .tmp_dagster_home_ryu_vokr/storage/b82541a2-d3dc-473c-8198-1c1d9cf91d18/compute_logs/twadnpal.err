[32m2025-07-11 09:56:19 +0000[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - b82541a2-d3dc-473c-8198-1c1d9cf91d18 - 62807 - LOGS_CAPTURED - Started capturing logs in process (pid: 62807).
[32m2025-07-11 09:56:19 +0000[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - b82541a2-d3dc-473c-8198-1c1d9cf91d18 - 62807 - manhattan_stats - STEP_START - Started execution of step "manhattan_stats".
[32m2025-07-11 09:56:21 +0000[0m - dagster - [34mERROR[0m - [31m__ASSET_JOB - b82541a2-d3dc-473c-8198-1c1d9cf91d18 - 62807 - manhattan_stats - STEP_FAILURE - Execution of step "manhattan_stats" failed.

dagster._core.errors.DagsterExecutionStepExecutionError: Error occurred while executing op "manhattan_stats"::

NameError: name 'gpd' is not defined

Stack Trace:
  File "/workspaces/project-dagster-university/dagster_university/dagster_essentials/.venv/lib/python3.12/site-packages/dagster/_core/execution/plan/utils.py", line 57, in op_execution_error_boundary
    yield
  File "/workspaces/project-dagster-university/dagster_university/dagster_essentials/.venv/lib/python3.12/site-packages/dagster/_utils/__init__.py", line 392, in iterate_with_context
    next_output = next(iterator)
                  ^^^^^^^^^^^^^^
  File "/workspaces/project-dagster-university/dagster_university/dagster_essentials/.venv/lib/python3.12/site-packages/dagster/_core/execution/plan/compute_generator.py", line 137, in _coerce_op_compute_fn_to_iterator
    result = invoke_compute_fn(
             ^^^^^^^^^^^^^^^^^^
  File "/workspaces/project-dagster-university/dagster_university/dagster_essentials/.venv/lib/python3.12/site-packages/dagster/_core/execution/plan/compute_generator.py", line 117, in invoke_compute_fn
    return fn(context, **args_to_pass) if context_arg_provided else fn(**args_to_pass)
                                                                    ^^^^^^^^^^^^^^^^^^
  File "/workspaces/project-dagster-university/dagster_university/dagster_essentials/src/dagster_essentials/defs/assets/metrics.py", line 30, in manhattan_stats
    trips_by_zone["geometry"] = gpd.GeoSeries.from_wkt(trips_by_zone["geometry"])
                                ^^^
[0m
